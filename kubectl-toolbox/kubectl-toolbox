#!/usr/bin/env bash

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e           # If a command fails, the whole script exit
set -u           # Treat unset variables as an error, and immediately exit.
set -o pipefail  # this will make your script exit if any command in a pipeline errors

########################################################################################
# FUNCTIONS

red()    { echo -e "\033[1;31m$@\033[0m" ; }
green()  { echo -e "\033[1;32m$@\033[0m" ; }
yellow() { echo -e "\033[1;33m$@\033[0m" ; }

ok()     { echo "$(green  "OK   -") $1" ; }
warn()   { echo "$(yellow "WARN -") $1" ; }
fail()   { echo "$(red    "FAIL -") $1" ; }

DIR=$(dirname ${BASH_SOURCE[0]})
KUBECTL=kubectl
KUBECTL_ARGS=""
TOOLBOX_ENTRY_COMMAND="bash"
TOOLBOX_NAME="toolbox-$(whoami)"
TOOLBOX_IMAGE=""

readonly PROGNAME=$(basename $0)

usage() {
    echo "Usage: call with '$PROGNAME [OPTION]'"
    echo "Kubectl plugin that spawns a privileged 'toolbox' pod"
    echo "in your current namespace for debugging. Once you exit, "
    echo "it destroyes the pod as to have any leftovers."
    echo "The script assumes you have setup proper RBAC on your"
    echo "kubernetes cluster so as to not allow any user to just spin up"
    echo "a privileged pod."
    echo "e.g. $PROGNAME -i debian:latest "
    echo "Flags:"
    echo "      -h print help"
    echo "      -v run in verbose mode"
    echo "      -i [docker image to run as toolbox]"
    echo "      -c [entrypoint command to run in toolbox container, defaults to 'bash']"
    echo "      -n [namespace on the kubernetes context, defaults to your default namespace]"
    echo "      -p [name for privileged pod, defaults to 'toolbox']"
    echo "      -k [kubectl binary to run, defaults to 'kubectl']"
}

parse_args() {
    while getopts "vhi:c:n:k:p:" OPTION
    do
         case $OPTION in
         h)  usage
             exit 0
             ;;
         v)  set -x
             ;;
         i)  TOOLBOX_IMAGE=$OPTARG
             ;;
         c)  TOOLBOX_ENTRY_COMMAND=$OPTARG
             ;;
         n)  KUBECTL_ARGS="${KUBECTL_ARGS} --namespace=$OPTARG"
             ;;
         p)  TOOLBOX_NAME=$OPTARG
             ;;
         k)  KUBECTL=$OPTARG
             ;;
         \?) usage
             exit 1
             ;;
        esac
    done

    if [[ -z "$TOOLBOX_IMAGE" ]]
    then
        TOOLBOX_IMAGE="ubuntu-debootstrap"
        warn "No docker image specified, defaulting to '${TOOLBOX_IMAGE}'"
    fi


    return 0
}

########################################################################################
# TRAP

cleanup() {
    TIMEOUT=100
    while [[ $(${KUBECTL} ${KUBECTL_ARGS} get pod -l run=${TOOLBOX_NAME} -o jsonpath="{.items..metadata.name}" 2> /dev/null) ]];
    do
      let TIMEOUT-=5
      if [[ TIMEOUT -le 0 ]]; then
        fail "Timed out waiting for ${TOOLBOX_NAME} death";
        exit 1;
      fi

      warn "Cleaning up ${TOOLBOX_NAME} pod..."
      ${KUBECTL} ${KUBECTL_ARGS} delete pod --ignore-not-found=true -l run=${TOOLBOX_NAME} --grace-period=0
      if [ $? -ne 0 ]; then
          fail "Cleanup of ${TOOLBOX_NAME} failed. retrying in 5 seconds..."
      fi
      sleep 5s;
    done
}

trap 'cleanup' ERR EXIT

########################################################################################
# Main

main() {

  parse_args "${@}"

  # do a pre-emptive cleanup in case of any leftovers
  cleanup

  cat <<EOF | ${KUBECTL} ${KUBECTL_ARGS}  create --record=true -f -
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: ${TOOLBOX_NAME}
  name: ${TOOLBOX_NAME}
spec:
  containers:
  - command: ["${TOOLBOX_ENTRY_COMMAND}"]
    image: ${TOOLBOX_IMAGE}
    imagePullPolicy: Always
    name: ${TOOLBOX_NAME}
    stdin: true
    tty: true
    securityContext:
      privileged: true
EOF

  POD_NAME=$(${KUBECTL} ${KUBECTL_ARGS} get pod -l run=${TOOLBOX_NAME} -o jsonpath="{.items..metadata.name}" 2> /dev/null)
  warn "Waiting for ${POD_NAME} to get Ready..."

  TIMEOUT=100
  # While toolbox pod status readiness != true, sleep for a bit
  while [[ "$(${KUBECTL} ${KUBECTL_ARGS} get pods -l run=${TOOLBOX_NAME} -o jsonpath='{.items..status.containerStatuses..ready}' 2> /dev/null)" != "true" ]];
  do
    let TIMEOUT-=5
    if [[ TIMEOUT -le 0 ]]; then
      fail "Timed out waiting for ${TOOLBOX_NAME} to appear";
      exit 1;
    fi
    sleep 5;
  done

  ${KUBECTL} ${KUBECTL_ARGS} attach ${POD_NAME} -i
}

main "${@}"
